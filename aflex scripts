https://www.a10networks.com/blog/aflex-examples/

provider "thunder" {
  # Provider configuration here
  # Include authentication details and target ADC IP address
}

resource "thunder_virtual_server" "vip" {
  name       = "your_vip_name"
  ip_address = "your_vip_ip_address"
  
  port_list {
    port_number  = 80
    protocol     = "http"
    service_group = "your_service_group_name"
    aflex_scripts = [<<EOF
when HTTP_REQUEST {
  if {[LB::status pool Server_HTTP] equals "down" } {
    HTTP::respond 200 content "<html><head><title>Apology
    Page</title></head><body>We are sorry for the inconvenience, but
    the site is temporarily out of service<br>If you feel you have
    reached this page in error, please try again.<p></body></html>"
  }
}
EOF
    ]
  }
}
----------
      aflex_scripts = [<<-EOT
when HTTP_REQUEST {
  if {[LB::status pool Server_HTTP] equals "down" } {
    HTTP::respond 200 content "<html><head><title>Apology
    Page</title></head><body>We are sorry for the inconvenience, but
    the site is temporarily out of service<br>If you feel you have
    reached this page in error, please try again.<p></body></html>"
  }
}
EOT
      ]
*****

sh-3.2# terraform plan
╷
│ Error: Unsupported block type
│ 
│   on main.tf line 55, in resource "thunder_slb_virtual_server" "virtual_server":
│   55: resource "thunder_file_aflex_local" "aflex_script" {
│ 
│ Blocks of type "resource" are not expected here.


0000


sh-3.2# vi main.tf

locals {
  config = yamldecode(file("${var.config_path}"))
}

# Dynamically create servers based on the config.yaml
resource "thunder_slb_server" "server" {
  for_each = {for s in local.config.servers : s.name => s}

  name = each.value.name
  host = each.value.host

  dynamic "port_list" {
    for_each = each.value.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
    }
  }
}

# Dynamically create service groups and associate servers
resource "thunder_slb_service_group" "service_group" {
  for_each = {for sg in local.config.servicegroup : sg.name => sg}

  name     = each.value.name
  protocol = each.value.protocol

  dynamic "member_list" {
    for_each = each.value.member_list
    content {
      # Ensure the server name matches a key in the thunder_slb_server.server map
      name = thunder_slb_server.server[member_list.value].name
      # Correctly reference the port number for the server
      port = thunder_slb_server.server[member_list.value].port_list[0].port_number
    }
  }
}

# Virtual Server
# VIP configuration with corrected syntax based on the documentation
resource "thunder_slb_virtual_server" "virtual_server" {
  name       = local.config.vip.name
  ip_address = local.config.vip.ip_address

#source_nat_auto = true
#enable_source_nat = true
  dynamic "port_list" {
    for_each = local.config.vip.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
      service_group = thunder_slb_service_group.service_group[port_list.value.service_group].name
     auto = 1

resource "thunder_file_aflex_local" "aflex_script" {
  action      = "import"
  dst_file    = "my_aflex_script"
  file        = "my_aflex_script"
  file_handle = "/opt/terraform/project_A10Terraform-v1/script.aflex"
  skip_backup = 0
}

#      template_persist_source_ip = try(port_list.value.template_persist_source_ip, null)
#      template_persist_cookie = try(port_list.value.template_persist_cookie, null)
}
}
}
                        

----
resource "thunder_virtual_server" "vip" {
  name       = "your_vip_name"
  ip_address = "your_vip_ip_address"
  
  // Other configuration for the VIP...
  
  aflex_script = thunder_file_aflex.aflex_script.dst_file
}

]]]]]]]]]


sh-3.2# vi main.tf

locals {
  config = yamldecode(file("${var.config_path}"))
}

# Dynamically create servers based on the config.yaml
resource "thunder_slb_server" "server" {
  for_each = {for s in local.config.servers : s.name => s}

  name = each.value.name
  host = each.value.host

  dynamic "port_list" {
    for_each = each.value.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
    }
  }
}

# Dynamically create service groups and associate servers
resource "thunder_slb_service_group" "service_group" {
  for_each = {for sg in local.config.servicegroup : sg.name => sg}

  name     = each.value.name
  protocol = each.value.protocol

  dynamic "member_list" {
    for_each = each.value.member_list
    content {
      # Ensure the server name matches a key in the thunder_slb_server.server map
      name = thunder_slb_server.server[member_list.value].name
      # Correctly reference the port number for the server
      port = thunder_slb_server.server[member_list.value].port_list[0].port_number
    }
  }
}

# Virtual Server
# VIP configuration with corrected syntax based on the documentation
resource "thunder_slb_virtual_server" "virtual_server" {
  name       = local.config.vip.name
  ip_address = local.config.vip.ip_address
#aflex_script = "my_aflex_script"
#source_nat_auto = true
#enable_source_nat = true
  dynamic "port_list" {
    for_each = local.config.vip.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
      service_group = thunder_slb_service_group.service_group[port_list.value.service_group].name
     auto = 1

#      template_persist_source_ip = try(port_list.value.template_persist_source_ip, null)
#      template_persist_cookie = try(port_list.value.template_persist_cookie, null)
}
}
}

resource "thunder_file_aflex_local" "aflex_script" {
  action      = "import"
  dst_file    = "my_aflex_scripts"
  file        = "my_aflex_scripts"
  file_handle = "/opt/terraform/project_A10Terraform-v1/script.aflex"
  skip_backup = 0
}

_____

sh-3.2# vi main.tf

locals {
  config = yamldecode(file("${var.config_path}"))
}

# Dynamically create servers based on the config.yaml
resource "thunder_slb_server" "server" {
  for_each = {for s in local.config.servers : s.name => s}

  name = each.value.name
  host = each.value.host

  dynamic "port_list" {
    for_each = each.value.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
    }
  }
}

# Dynamically create service groups and associate servers
resource "thunder_slb_service_group" "service_group" {
  for_each = {for sg in local.config.servicegroup : sg.name => sg}

  name     = each.value.name
  protocol = each.value.protocol

  dynamic "member_list" {
    for_each = each.value.member_list
    content {
      # Ensure the server name matches a key in the thunder_slb_server.server map
      name = thunder_slb_server.server[member_list.value].name
      # Correctly reference the port number for the server
      port = thunder_slb_server.server[member_list.value].port_list[0].port_number
    }
  }
}

# Virtual Server
# VIP configuration with corrected syntax based on the documentation
resource "thunder_slb_virtual_server" "virtual_server" {
  name       = local.config.vip.name
  ip_address = local.config.vip.ip_address
#aflex_script = "my_aflex_script"
#source_nat_auto = true
#enable_source_nat = true
  dynamic "port_list" {
    for_each = local.config.vip.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
      service_group = thunder_slb_service_group.service_group[port_list.value.service_group].name
     auto = 1

#      template_persist_source_ip = try(port_list.value.template_persist_source_ip, null)
#      template_persist_cookie = try(port_list.value.template_persist_cookie, null)
}
}
}

resource "thunder_file_aflex_local" "aflex_script" {
  action      = "import"
  dst_file    = "my_aflex_scripts"
  file        = "my_aflex_scripts"
  file_handle = "/opt/terraform/project_A10Terraform-v1/script.aflex"
  skip_backup = 0
}


====


sh-3.2# vi config.yaml 

load_balancer:
  ip_address: "10.228.34.212"
  partition: "a10tflab"

servers:
  real_server_1:
    name: "0990t05103hc01"
    host: "10.230.72.133"
    port_list:
      - port_number: 80
        protocol: "tcp"
      - port_number: 443
        protocol: "tcp"
  real_server_2:
    name: "0990t05103hc02"
    host: "10.230.72.139"
    port_list:
      - port_number: 80
        protocol: "tcp"
      - port_number: 443
        protocol: "tcp"

servicegroup:
  service_group_1:
    name: "a10tflab_nordstrom_net_service_group1"
    protocol: "tcp"
    port_number: 80
    lb_method: null
    health_check: test-health-monitor
    member_list:
      - "0990t05103hc01"

  service_group_2:
    name: "a10tflab_nordstrom_net_service_group2"
    protocol: "tcp"
    port_number: 443
    lb_method: "round-robin"
    health_check: null
    member_list:
      - "0990t05103hc02"


vip:
  name: "10tflab_nordstrom_net_virtual_server_1"
  ip_address: "10.230.72.159"
  port_list:
    - port_number: 80
      protocol: "http"
      service_group: "a10tflab_nordstrom_net_service_group1"
      template_persist_source_ip: "tflab-persistence-template"
      template_persist_cookie: "tflab-cookie-template"
      aflex_scripts: ["Terraform_aflex_script"]

======

sh-3.2# terraform plan
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 54, in resource "thunder_slb_virtual_server" "virtual_server":
│   54:      aflex_scripts = port_list.value.aflex_scripts
│ 
│ An argument named "aflex_scripts" is not expected here. Did you mean to define a block of type "aflex_scripts"?

_________

sh-3.2# vi main.tf

locals {
  config = yamldecode(file("${var.config_path}"))
}

# Dynamically create servers based on the config.yaml
resource "thunder_slb_server" "server" {
  for_each = {for s in local.config.servers : s.name => s}

  name = each.value.name
  host = each.value.host

  dynamic "port_list" {
    for_each = each.value.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
    }
  }
}

# Dynamically create service groups and associate servers
resource "thunder_slb_service_group" "service_group" {
  for_each = {for sg in local.config.servicegroup : sg.name => sg}

  name     = each.value.name
  protocol = each.value.protocol

  dynamic "member_list" {
    for_each = each.value.member_list
    content {
      # Ensure the server name matches a key in the thunder_slb_server.server map
      name = thunder_slb_server.server[member_list.value].name
      # Correctly reference the port number for the server
      port = thunder_slb_server.server[member_list.value].port_list[0].port_number
    }
  }
}

# Virtual Server
# VIP configuration with corrected syntax based on the documentation
resource "thunder_slb_virtual_server" "virtual_server" {
  name       = local.config.vip.name
  ip_address = local.config.vip.ip_address

#source_nat_auto = true
#enable_source_nat = true
  dynamic "port_list" {
    for_each = local.config.vip.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
      service_group = thunder_slb_service_group.service_group[port_list.value.service_group].name
     auto = 1
     aflex_scripts = port_list.value.aflex_scripts
#      template_persist_source_ip = try(port_list.value.template_persist_source_ip, null)
#      template_persist_cookie = try(port_list.value.template_persist_cookie, null)
}
}
}

resource "thunder_file_aflex_local" "aflex_script" {
  action      = "import"
  dst_file    = "my_aflex_scripts"
  file        = "my_aflex_scripts"
  file_handle = "/opt/terraform/project_A10Terraform-v1/script.aflex"
  skip_backup = 0
}
-----
dynamic "aflex" {
        for_each = port_list.value.aflex_scripts
        content {
          name = aflex.value
        }
      }


-------------

rovider "thunder" {
  address = ""
  username = ""
  password = ""
}

 
resource "thunder_slb_template_http" "test_http" {
      
      name = "Template_HTTP_XFF"
      insert_client_ip = 1
      insert_client_ip_header_name = "X-Forwarded-For"             
}


resource "thunder_slb_template_connection_reuse" "test_connection_reuse" {
      
      name = "Template_ConRe-Use_5000"
      limit_per_server = 5000
      timeout = 300            
}

resource "thunder_slb_template_persist_cookie" "test_persist_cookie" {
      
       name = "Template_Persist_Cookie_SSL"
       encrypt_level = 0
        secure = 1
        httponly = 1         
}

resource "thunder_slb_template_persist_source_ip" "test_persist_source_ip" {
      
       name = "Template_Persist_Source_IP"
       timeout = 3       
}

resource "thunder_slb_template_tcp_proxy" "test_tcp_proxy" {
      
        name = "Template_TCP-Proxy_300"
        idle_timeout = 300
        reset_fwd = 1
        reset_rev = 1      
}

resource "thunder_import" "test_import_aflex" {
     
		# depends_on = [thunder_service_group.test_group]
    remote_file = "scp://root@10.10.10.10:/home/visibility/vip-switch-ar2"
    use_mgmt_port =  1
    aflex =  "vip-switch-ar2"
    password = "password"
    overwrite =  1
}


resource "thunder_ip_nat_pool" "test_pool" {
        
        pool_name = "SNAT_VRID1"
        start_address = "1.1.1.1"
        end_address = "1.1.1.10"
        netmask = "/24"
        vrid = 4
        ip_rr = 1
        port_overload = 1        
}

resource "thunder_server" "rs10" {
  health_check_disable=1
  name="rs10"
  host="10.0.3.2"
  port_list {
    health_check_disable=1
    port_number=8080
    protocol="tcp"
  }
}

resource "thunder_service_group" "test_group" {

  name = "test_pool_group_dev"
  protocol="TCP"
  member_list {
    name=thunder_server.rs10.name
    port=8080
  }
}

resource "thunder_virtual_server" "test_virtual" {
      
      # depends_on = [thunder_service_group.test_group, thunder_import.test_import_aflex, thunder_slb_template_http.test_http]
      name = "VS_10.10.10.101"
      ip_address = "10.10.10.101"
      vrid = 4
      port_list {
          port_number = 80
          protocol = "http"
          aflex_scripts {
              aflex = thunder_import.test_import_aflex.aflex
          }
          no_auto_up_on_aflex = 1
          pool = thunder_ip_nat_pool.test_pool.pool_name
          service_group = thunder_service_group.test_group.name
          use_rcv_hop_for_resp = 1
          template_connection_reuse = thunder_slb_template_connection_reuse.test_connection_reuse.name
          template_persist_cookie = thunder_slb_template_persist_cookie.test_persist_cookie.name
          template_http = thunder_slb_template_http.test_http.name
          template_tcp_proxy_client = thunder_slb_template_tcp_proxy.test_tcp_proxy.name
          template_tcp_proxy_server = thunder_slb_template_tcp_proxy.test_tcp_proxy.name
      }        
            
}

-------
│ 
╵
sh-3.2# vi main.tf

locals {
  config = yamldecode(file("${var.config_path}"))
}

# Dynamically create servers based on the config.yaml
resource "thunder_slb_server" "server" {
  for_each = {for s in local.config.servers : s.name => s}

  name = each.value.name
  host = each.value.host

  dynamic "port_list" {
    for_each = each.value.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
    }
  }
}

# Dynamically create service groups and associate servers
resource "thunder_slb_service_group" "service_group" {
  for_each = {for sg in local.config.servicegroup : sg.name => sg}

  name     = each.value.name
  protocol = each.value.protocol

  dynamic "member_list" {
    for_each = each.value.member_list
    content {
      # Ensure the server name matches a key in the thunder_slb_server.server map
      name = thunder_slb_server.server[member_list.value].name
      # Correctly reference the port number for the server
      port = thunder_slb_server.server[member_list.value].port_list[0].port_number
    }
  }
}

# Virtual Server
# VIP configuration with corrected syntax based on the documentation
resource "thunder_slb_virtual_server" "virtual_server" {
  name       = local.config.vip.name
  ip_address = local.config.vip.ip_address

  dynamic "port_list" {
    for_each = local.config.vip.port_list
    content {
      port_number = port_list.value.port_number
      protocol    = port_list.value.protocol
      service_group = thunder_slb_service_group.service_group[port_list.value.service_group].name
     auto = 1

aflex_scripts {
              aflex = "my_aflex_scripts"
          }
}
}
}

resource "thunder_file_aflex_local" "aflex_script" {
  action      = "import"
  dst_file    = "my_aflex_scripts"
  file        = "my_aflex_scripts"
  file_handle = "/opt/terraform/project_A10Terraform-v1/script.aflex"
  skip_backup = 0
}
;;;;;

sh-3.2# vi config.yaml 

load_balancer:
  ip_address: "10.228.34.212"
  partition: "a10tflab"

servers:
  real_server_1:
    name: "0990t05103hc01"
    host: "10.230.72.133"
    port_list:
      - port_number: 80
        protocol: "tcp"
      - port_number: 443
        protocol: "tcp"
  real_server_2:
    name: "0990t05103hc02"
    host: "10.230.72.139"
    port_list:
      - port_number: 80
        protocol: "tcp"
      - port_number: 443
        protocol: "tcp"

servicegroup:
  service_group_1:
    name: "a10tflab_nordstrom_net_service_group1"
    protocol: "tcp"
    port_number: 80
    lb_method: null
    health_check: test-health-monitor
    member_list:
      - "0990t05103hc01"

  service_group_2:
    name: "a10tflab_nordstrom_net_service_group2"
    protocol: "tcp"
    port_number: 443
    lb_method: "round-robin"
    health_check: null
    member_list:
      - "0990t05103hc02"


vip:
  name: "10tflab_nordstrom_net_virtual_server_1"
  ip_address: "10.230.72.159"
  port_list:
    - port_number: 80
      protocol: "http"
      service_group: "a10tflab_nordstrom_net_service_group1"
      template_persist_source_ip: "tflab-persistence-template"
      template_persist_cookie: "tflab-cookie-template"
      aflex_scripts: ["my_aflex_scripts"]



----

  + shared_partition_diameter_template               = 0
          + shared_partition_dns_template                    = 0
          + shared_partition_doh_template                    = 0
          + shared_partition_dynamic_service_template        = 0
          + shared_partition_external_service_template       = 0
          + shared_partition_fix_template                    = 0
          + shared_partition_http_policy_template            = 0
          + shared_partition_http_template                   = 0
          + shared_partition_imap_pop3_template              = 0
          + shared_partition_persist_cookie_template         = 0
          + shared_partition_persist_destination_ip_template = 0
          + shared_partition_persist_source_ip_template      = 0
          + shared_partition_persist_ssl_sid_template        = 0
          + shared_partition_policy_template                 = 0
          + shared_partition_pool                            = 0
          + shared_partition_quic_template                   = 0
          + shared_partition_server_ssl_template             = 0
          + shared_partition_smpp_template                   = 0
          + shared_partition_smtp_template                   = 0
          + shared_partition_tcp                             = 0
          + shared_partition_tcp_proxy_template              = 0
          + shared_partition_udp                             = 0
          + shared_partition_virtual_port_template           = 0
          + showtech_print_extended_stats                    = 0
          + skip_rev_hash                                    = 0
          + snat_on_vip                                      = 0
          + stats_data_action                                = "stats-data-enable"
          + substitute_source_mac                            = 0
          + support_http2                                    = 0
          + syn_cookie                                       = 0
          + template_tcp                                     = "default"
          + template_tcp_shared                              = "default"
          + template_udp                                     = "default"
          + template_udp_shared                              = "default"
          + template_virtual_port                            = "default"
          + use_alternate_port                               = 0
          + use_cgnv6                                        = 0
          + use_default_if_no_server                         = 0
          + use_rcv_hop_for_resp                             = 0
          + use_rcv_hop_group                                = 0
          + uuid                                             = (known after apply)
          + when_down                                        = 0
          + when_down_protocol2                              = 0

          + aflex_scripts {
              + aflex = "my_aflex_scripts"
            }
        }
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

thunder_file_aflex_local.aflex_script: Creating...
thunder_slb_server.server["0990t05103hc02"]: Creating...
thunder_slb_server.server["0990t05103hc01"]: Creating...
thunder_file_aflex_local.aflex_script: Creation complete after 0s [id=1]
thunder_slb_server.server["0990t05103hc02"]: Creation complete after 0s [id=0990t05103hc02]
thunder_slb_server.server["0990t05103hc01"]: Creation complete after 0s [id=0990t05103hc01]
thunder_slb_service_group.service_group["a10tflab_nordstrom_net_service_group2"]: Creating...
thunder_slb_service_group.service_group["a10tflab_nordstrom_net_service_group1"]: Creating...
thunder_slb_service_group.service_group["a10tflab_nordstrom_net_service_group2"]: Creation complete after 0s [id=a10tflab_nordstrom_net_service_group2]
thunder_slb_service_group.service_group["a10tflab_nordstrom_net_service_group1"]: Creation complete after 2s [id=a10tflab_nordstrom_net_service_group1]
thunder_slb_virtual_server.virtual_server: Creating...
╷
│ Error: axapi failure::err=Line 2: the pool doesn't exist. [LB::status pool Server_HTTP]
│ 
│   with thunder_slb_virtual_server.virtual_server,
│   on main.tf line 41, in resource "thunder_slb_virtual_server" "virtual_server":
│   41: resource "thunder_slb_virtual_server" "virtual_server" {
